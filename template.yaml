AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Example Node AWS SAM application Integrates with Terraform deployed infrastructure

Parameters:
  AppName:
    Type: String
    Description: Name of application (no spaces). Value must be globally unique
    Default: example
  Environment:
    Type: String
    Description: Name of application (no spaces). Value must be globally unique
    Default: dev
  IdentityRoleARN:
    Type: String
    Description: Identity lambda Role ARN
  UserRoleARN:
    Type: String
    Description: User lambda Role ARN
  UserReceiverRoleARN:
    Type: String
  DebugSampleRate:
    Type: Number
    Description: Percentage of debug logging printed to CloudWatch on Production environment
    Default: 0.05
  CognitoUserPoolARN: # OpenAPI param
    Type: String
  CognitoUserPoolClientID:
    Type: String
  CognitoUserPoolID:
    Type: String
  SNSTopicARN:
    Type: String
  APITimeout: # OpenAPI param
    Type: Number
    Description: Sets the timeout in millis for all API endpoints
    Default: 4000

Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Runtime: nodejs12.x
    Timeout: 4
    ReservedConcurrentExecutions: 10
    MemorySize: 256
    AutoPublishAlias: live
    DeploymentPreference:
      Type: AllAtOnce
    Tags:
      Environment:
        Ref: Environment
      Name:
        Ref: AppName
    Tracing: Active
    Layers:
    - Ref: LambdaLayer

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      EndpointConfiguration: EDGE
      StageName: dev
      TracingEnabled: true
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          DataTraceEnabled: True
          LoggingLevel: ERROR
          MetricsEnabled: True
          ThrottlingBurstLimit: 10
          ThrottlingRateLimit: 20
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: api.yaml
      Tags:
        Environment:
          Ref: Environment
        Name:
          Ref: AppName

  IdentityFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: identity/app.lambdaHandler
      Role:
        Ref: IdentityRoleARN
      Environment:
        Variables:
          COGNITO_USER_POOL_CLIENT_ID:
            Ref: CognitoUserPoolClientID
          COGNITO_USER_POOL_ID:
            Ref: CognitoUserPoolID
          DEBUG_SAMPLE_RATE:
            Ref: DebugSampleRate
      Events:
        identityAuthenticate:
          Type: Api
          Properties:
            Path: /identity/authenticate
            Method: post
            RestApiId:
              Ref: Api
        identityRegister:
          Type: Api
          Properties:
            Path: /identity/register
            Method: post
            RestApiId:
              Ref: Api
        identityReset:
          Type: Api
          Properties:
            Path: /identity/reset
            Method: post
            RestApiId:
              Ref: Api
        identityVerify:
          Type: Api
          Properties:
            Path: /identity/verify
            Method: post
            RestApiId:
              Ref: Api

  UserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: user/app.lambdaHandler
      Role:
        Ref: UserRoleARN
      Environment:
        Variables:
          DEBUG_SAMPLE_RATE:
            Ref: DebugSampleRate
      Events:
        getUser:
          Type: Api
          Properties:
            Path: /user
            Method: get
            RestApiId:
              Ref: Api
        postUser:
          Type: Api
          Properties:
            Path: /user
            Method: post
            RestApiId:
              Ref: Api

  UserReceiverFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: user_receiver/app.lambdaHandler
      Role:
        Ref: UserReceiverRoleARN
      Environment:
        Variables:
          DEBUG_SAMPLE_RATE:
            Ref: DebugSampleRate
      Events:
        SNS:
          Type: SNS
          Properties:
            Topic: 
              Ref: SNSTopicARN

  LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName:
        Fn::Sub: ${Environment}-${AppName}-layer
      Description:
        Fn::Sub: Lambda layer for ${Environment}-${AppName}-layer application
      ContentUri: dependencies
      CompatibleRuntimes:
      - nodejs12.x
      RetentionPolicy: Retain

Outputs:
  Api:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value:
      Fn::Sub: https://${Api}.execute-api.${AWS::Region}.amazonaws.com/dev/
  IdentityFunction:
    Description: Identity Lambda Function ARN
    Value:
      Fn::GetAtt:
      - IdentityFunction
      - Arn
  UserFunction:
    Description: User Lambda Function ARN
    Value:
      Fn::GetAtt:
      - UserFunction
      - Arn
  UserReceiverFunction:
    Description: User receiver Lambda Function ARN
    Value:
      Fn::GetAtt:
      - UserReceiverFunction
      - Arn
