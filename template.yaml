AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Example Node AWS SAM application Integrates with Terraform deployed
  infrastructure

  '
Parameters:
  AppName:
    Type: String
    Description: Name of application (no spaces). Value must be globally unique
    Default: example
  Environment:
    Type: String
    Description: Name of application (no spaces). Value must be globally unique
    Default: dev
  UserPoolARN:
    Type: String

Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 4
    ReservedConcurrentExecutions: 10
    Tags:
      Environment:
        Ref: Environment
      Name:
        Ref: AppName
    Tracing: Active
    Layers:
    - Ref: LambdaLayer

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      EndpointConfiguration: EDGE
      StageName: Dev
      TracingEnabled: true
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: api.yaml
      Tags:
        Environment:
          Ref: Environment
        Name:
          Ref: AppName

  IdentityFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: IdentityFunction
      Handler: identity/app.lambdaHandler
      Role: ''
      Events:
        identityAuthenticate:
          Type: Api
          Properties:
            Path: /identity/authenticate
            Method: post
            RestApiId:
              Ref: Api
        identityRegister:
          Type: Api
          Properties:
            Path: /identity/register
            Method: post
            RestApiId:
              Ref: Api
        identityReset:
          Type: Api
          Properties:
            Path: /identity/reset
            Method: post
            RestApiId:
              Ref: Api
        identityVerify:
          Type: Api
          Properties:
            Path: /identity/verify
            Method: post
            RestApiId:
              Ref: Api

  UserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UserFunction
      Handler: user/app.lambdaHandler
      Role: ''
      Events:
        getUser:
          Type: Api
          Properties:
            Path: /user
            Method: get
            RestApiId:
              Ref: Api
        postUser:
          Type: Api
          Properties:
            Path: /user
            Method: post
            RestApiId:
              Ref: Api

  UserReceiverFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UserReceiverFunction
      Handler: user_receiver/app.lambdaHandler
      Role: ''

  LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName:
        Fn::Sub: ${Environment}-${AppName}-layer
      Description:
        Fn::Sub: Lambda layer for ${Environment}-${AppName}-layer application
      ContentUri: ..\..\dependencies
      CompatibleRuntimes:
      - nodejs12.x
      RetentionPolicy: Retain

Outputs:
  Api:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value:
      Fn::Sub: https://${Api}.execute-api.${AWS::Region}.amazonaws.com/dev/
  IdentityFunction:
    Description: Identity Lambda Function ARN
    Value:
      Fn::GetAtt:
      - IdentityFunction
      - Arn
  UserFunction:
    Description: User Lambda Function ARN
    Value:
      Fn::GetAtt:
      - UserFunction
      - Arn
  UserReceiverFunction:
    Description: User receiver Lambda Function ARN
    Value:
      Fn::GetAtt:
      - UserReceiverFunction
      - Arn
